from sympy import factorint
from Crypto.Util.number import long_to_bytes

def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0
    g, x1, y1 = extended_gcd(b, a % b)
    x = y1
    y = x1 - (a // b) * y1
    return g, x, y

def mod_inverse(e, phi_N):
    g, x, y = extended_gcd(e, phi_N)
    if g != 1:
        raise Exception('No modular inverse exists')
    return x % phi_N

N = 14587704432822344892341272427282646120364434437414523883376089608218979364959927948590898540264210246449374363014541914863792835772986609660515612532877044074684115597786182642011407163350289201826895454398548254854919237599957739718174053771619150887665707867636064460914489445835497948439951659044458159773886454887057327846897569977945202458245268351728125973721764332352011029125694046428350269451464778793326007087955043888570293765138721335344787054343738337660927131968049415376352589981259058448540690666004751490375493430556965591293772542601776934892741235532054785639594081598607404023545471998403197674267
e = 65537
C=7329184746351979600304810893726842767688467204256990201181172159445966473650977905122553415838916142690364388789400790015517642902297387406215773278164829517035052625373870964570981590734714495297149889660019174034119566329569798047522829383224123884562703447321306836996392334132844673471179765556339187200820259655159008340673516040862000226792914228312336356120448967504158288031247387263438925257977725844911872753683719735641011693324441777888582417108481882731436005780409094974241968759397096299213838515746566064813787517925040756180508206242396925444425306180593790729890681708626826056328684043890127100581

#factors = factorint(N)
#print(factors)
p = 120779569600252943161428555243997709394913636801182756665133615449630008291510573529841391182771639778066416803610444961256275406440880229575442847739949863364524680706886786439379719632896372681515533804347498137103952831632973529033623028323642056936826397357492220492637940762028368790205073089303999198479
q = 120779569600252943161428555243997709394913636801182756665133615449630008291510573529841391182771639778066416803610444961256275406440880229575442847739949863364524680706886786439379719632896372681515533804347498137103952831632973529033623028323642056936826397357492220492637940762028368790205073089304002750773

phi_N = (p - 1) * (q - 1)

d = mod_inverse(e, phi_N)
print("The D Value is : \n",d)
#d = 14248703962077751284592431956910925259761797245474363060110121003105570060706849988572833348436351293409985969361015703161433001040205759049212603882991151554035567326497775236060823933880180859144405230905727573527668341177101404554971907138508450568732664348976227633260297654541916256029953545357156181084732355103274586889607850061757566739760755072327729833704644635128193284967372064332909356826192514948344962497455118970706934362967134496981497498913739793402096885793695374851472114224023995084544806908931239916501395598446179415993452041928847878980055959999144621247562831065997625184107675771371433833425

plaintext = pow(C, d, N)
print("This is text : \n",plaintext)
# plaintext = 10668929487112715015386141655863628827435466429705069713350312606858982395048045960372953266097502354984793049997693
flag = long_to_bytes(plaintext)
print(flag)


